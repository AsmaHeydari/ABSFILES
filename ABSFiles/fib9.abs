module TestModule;



data Val = IntVal(Int intVal)| PtrVal(Ptr ptrVal);

data Ptr = NullPtr| Ptr(Loc loc);

data Loc = Loc(Mem mem, Int offset);

interface Mem {
        Val getVal(Int offset);
        Unit setVal(Int offset, Val newVal);
}

def List<A> replace<A>(List<A> l, Int i, A a) = 
        if ( i == 0 ) then Cons( a, tail(l) ) else Cons( head(l), replace(tail(l), ( i - 1 ), a) );

class Mem(List<Val> vals) implements Mem {
        
        
        Val getVal(Int offset){
                return nth(this.vals, offset);
        }
        Unit setVal(Int offset, Val newVal){
                this.vals = replace(this.vals, offset, newVal);
        }
        }

interface Function_set_x {
        Val call();
}

class Function_set_x(List<Loc> globalVars, List<Loc> params) implements Function_set_x {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Unit> tmp_2 = this!setVal_val_val(nth(this.globalVars, 0), 1);
                        await tmp_2?;
                        Fut<Val> tmp_3 = this!getVal_val(nth(this.params, 0));
                        await tmp_3?;
                        result = tmp_3.get;
                        returnFlag = True;
                }
                return result;
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Unit setVal_val_val(Loc loc, Int value){
                Fut<Unit> se = mem(loc)!setVal(offset(loc), IntVal( value ));
                se.get;
        }
        }

interface Function_two_unspec {
        Val call();
}

class Function_two_unspec(List<Loc> globalVars, List<Loc> params) implements Function_two_unspec {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Unit> tmp_5 = this!setVal_val_val(nth(this.globalVars, 0), 0);
                        await tmp_5?;
                        Fut<Val> tmp_6 = this!getVal_val(nth(this.globalVars, 0));
                        Fut<Val> tmp_7 = this!call_set_x_val_0(1);
                        Fut<Val> tmp_8 = this!op_plus_fut_fut(tmp_6, tmp_7);
                        await tmp_8?;
                        result = tmp_8.get;
                        returnFlag = True;
                }
                return result;
        }
        Val call_set_x_val_0(Int arg1){
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(IntVal( arg1 ), 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_set_x tmp_9 = new Function_set_x(this.globalVars, params);
                Fut<Val> tmp_10 = tmp_9!call();
                Val tmp_11 = tmp_10.get;
                return tmp_11;
        }
        Val op_plus_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( ( intVal(arg1) + intVal(arg2) ) );
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Unit setVal_val_val(Loc loc, Int value){
                Fut<Unit> se = mem(loc)!setVal(offset(loc), IntVal( value ));
                se.get;
        }
        }

interface Function_add_zero {
        Val call();
}

class Function_add_zero(List<Loc> globalVars, List<Loc> params) implements Function_add_zero {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Unit> tmp_13 = this!setVal_val_val(nth(this.globalVars, 0), 0);
                        await tmp_13?;
                        Fut<Val> tmp_14 = this!getVal_val(nth(this.params, 0));
                        Fut<Val> tmp_15 = this!getVal_val(nth(this.globalVars, 0));
                        Fut<Val> tmp_16 = this!op_minus_fut_fut(tmp_14, tmp_15);
                        Fut<Val> tmp_17 = this!call_set_x_val_0(0);
                        Fut<Val> tmp_18 = this!op_plus_fut_fut(tmp_16, tmp_17);
                        await tmp_18?;
                        result = tmp_18.get;
                        returnFlag = True;
                }
                return result;
        }
        Val call_set_x_val_0(Int arg1){
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(IntVal( arg1 ), 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_set_x tmp_19 = new Function_set_x(this.globalVars, params);
                Fut<Val> tmp_20 = tmp_19!call();
                Val tmp_21 = tmp_20.get;
                return tmp_21;
        }
        Val op_minus_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( ( intVal(arg1) - intVal(arg2) ) );
        }
        Val op_plus_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( ( intVal(arg1) + intVal(arg2) ) );
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Unit setVal_val_val(Loc loc, Int value){
                Fut<Unit> se = mem(loc)!setVal(offset(loc), IntVal( value ));
                se.get;
        }
        }

interface Function_fib {
        Val call();
}

class Function_fib(List<Loc> globalVars, List<Loc> params) implements Function_fib {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_22 = this!getVal_val(nth(this.params, 0));
                        Fut<Val> tmp_23 = this!cmp_gt_int_fut_val(tmp_22, 3);
                        await tmp_23?;
                        Val tmp_45 = tmp_23.get;
                        if ( ( intVal(tmp_45) != 0 ) ){
                                Fut<Val> tmp_24 = this!getVal_val(nth(this.params, 0));
                                Fut<Val> tmp_25 = this!op_minus_fut_val(tmp_24, 2);
                                Fut<Val> tmp_26 = this!call_fib_fut_0(tmp_25);
                                Fut<Val> tmp_27 = this!getVal_val(nth(this.params, 0));
                                Fut<Val> tmp_28 = this!op_minus_fut_val(tmp_27, 1);
                                Fut<Val> tmp_29 = this!call_fib_fut_0(tmp_28);
                                Fut<Val> tmp_30 = this!call_add_zero_fut_0(tmp_29);
                                Fut<Val> tmp_31 = this!op_plus_fut_fut(tmp_26, tmp_30);
                                await tmp_31?;
                                result = tmp_31.get;
                                returnFlag = True;
                        } else {
                                Fut<Val> tmp_38 = this!getVal_val(nth(this.params, 0));
                                Fut<Val> tmp_39 = this!cmp_eq_int_fut_val(tmp_38, 3);
                                await tmp_39?;
                                Val tmp_44 = tmp_39.get;
                                if ( ( intVal(tmp_44) != 0 ) ){
                                        Fut<Val> tmp_40 = this!call_two_unspec_0();
                                        await tmp_40?;
                                        result = tmp_40.get;
                                        returnFlag = True;
                                } else {
                                        result = IntVal( 1 );
                                        returnFlag = True;
                                }
                        }
                }
                return result;
        }
        Val call_add_zero_fut_0(Fut<Val> fut_arg1){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_add_zero tmp_35 = new Function_add_zero(this.globalVars, params);
                Fut<Val> tmp_36 = tmp_35!call();
                Val tmp_37 = tmp_36.get;
                return tmp_37;
        }
        Val cmp_eq_int_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( if ( arg1 == IntVal( arg2 ) ) then 1 else 0 );
        }
        Val call_two_unspec_0(){
                List<Loc> params = Nil;
                Function_two_unspec tmp_41 = new Function_two_unspec(this.globalVars, params);
                Fut<Val> tmp_42 = tmp_41!call();
                Val tmp_43 = tmp_42.get;
                return tmp_43;
        }
        Val op_plus_fut_fut(Fut<Val> fut_arg1, Fut<Val> fut_arg2){
                await fut_arg1? & fut_arg2?;
                Val arg1 = fut_arg1.get;
                Val arg2 = fut_arg2.get;
                return IntVal( ( intVal(arg1) + intVal(arg2) ) );
        }
        Val getVal_val(Loc loc){
                Fut<Val> futureResult = mem(loc)!getVal(offset(loc));
                Val result = futureResult.get;
                return result;
        }
        Val op_minus_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( ( intVal(arg1) - arg2 ) );
        }
        Val cmp_gt_int_fut_val(Fut<Val> fut_arg1, Int arg2){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                return IntVal( if ( arg1 > IntVal( arg2 ) ) then 1 else 0 );
        }
        Val call_fib_fut_0(Fut<Val> fut_arg1){
                await fut_arg1?;
                Val arg1 = fut_arg1.get;
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(arg1, 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_fib tmp_32 = new Function_fib(this.globalVars, params);
                Fut<Val> tmp_33 = tmp_32!call();
                Val tmp_34 = tmp_33.get;
                return tmp_34;
        }
        }

interface Function_main {
        Val call();
}

class Function_main(List<Loc> globalVars, List<Loc> params) implements Function_main {
        List<Loc> localVars = Nil;
        
        Val call(){
                Bool returnFlag = False;
                Val result = IntVal( 0 );
                {
                        Fut<Val> tmp_46 = this!call_fib_val_0(9);
                        await tmp_46?;
                        result = tmp_46.get;
                        returnFlag = True;
                }
                return result;
        }
        Val call_fib_val_0(Int arg1){
                List<Loc> params = Nil;
                Mem mem_0 = new Mem(copy(IntVal( arg1 ), 1));
                params = appendright(params, Loc( mem_0, 0 ));
                Function_fib tmp_47 = new Function_fib(this.globalVars, params);
                Fut<Val> tmp_48 = tmp_47!call();
                Val tmp_49 = tmp_48.get;
                return tmp_49;
        }
        }

interface InitI {
        Unit initM();
}

class InitC(List<Loc> globalVars) implements InitI {
        
        
        Unit initM(){
                Mem mem_0 = new Mem(copy(IntVal( 0 ), 1));
                this.globalVars = appendright(this.globalVars, Loc( mem_0, 0 ));
                Function_main main = new Function_main(this.globalVars, Nil);
                Fut<Val> fv = main!call();
                Val v = fv.get;
                println(toString(intVal(v)));
        }
        }


{
        InitI initO = new InitC(Nil);
        Fut<Unit> futureResult = initO!initM();
        await futureResult?;
}
